mutant_count <- sum(x[[x_var]] == "Mutant", na.rm = TRUE)
wild_type_count <- sum(x[[x_var]] == "Wild-type", na.rm = TRUE)
unknown_count <- sum(x[[x_var]] == "", na.rm = TRUE)
mutant_counts = as.data.frame(as.matrix(rep(0,3)))
mutant_counts$name = c("Mutant", "Wild_type", "Unknown")
mutant_counts$value = c(mutant_count, wild_type_count, unknown_count)
# plot the counts vs. category
mutant_counts |>
arrange(value) |>
mutate(name=factor(name, levels=c("Mutant", "Wild_type", "Unknown"))) |>
ggplot(aes(x = name, y = value)) +
geom_col() +
geom_text(aes(label=value), vjust = -0.3) +
labs(title = "number of mutant, wild-type, and unknown",
x = "category", y = "count") +
theme_bw()
}
plot_mutant_cnt(demo, marker)
plot_mutant_cnt(demo, "marker")
document()
library(bis620.2022)
library(lubridate)
library(dplyr)
library(ggplot2)
library(haven)
library(purrr)
library(gtsummary)
data(adae)
data(adsl)
data(biomark)
plot_mutant_cnt(demo, "marker")
?mutate
?arrange
x_vars <- c("BMMTR1", "BMMTR2", "BMMTR3", "BMMTR15")
demo[x_vars, 1]
demo[x_vars, 4]
demo[[x_vars]][4]
demo[[x_vars]][1]
demo[1][[x_vars]]
demo[[x_vars]][[1]]
demo[1,x_vars]
demo[4,x_vars]
demo[10,x_vars]
determine_mutant = function(x, x_vars){
# create a new variable "marker" to record the patient marker for each patient:
# "Mutant", "Wild-type", or ""
x$marker = ""
for (i in 1:nrow(x)) {
if ("Mutant" %in% c(x[i, x_vars])) {
x$marker[i] <- "Mutant"
} else {
wild_type_count <- sum(x[i, x_vars] == "Wild-type", na.rm = TRUE)
unknown_failure_count <- sum(x[i, x_vars] %in% c("", "Failure"), na.rm = TRUE)
if (wild_type_count > unknown_failure_count) {
x$marker[i] <- "Wild-type"
} else {
x$marker[i] <- ""
}
}
}
}
demo = left_join(adsl, biomark, by = "SUBJID")
demo <- determine_mutant(demo, c("BMMTR1", "BMMTR2", "BMMTR3", "BMMTR15"))
plot_mutant_cnt(demo)
plot_mutant_cnt(demo, "marker")
determine_mutant = function(x, x_vars){
# create a new variable "marker" to record the patient marker for each patient:
# "Mutant", "Wild-type", or ""
x$marker = ""
for (i in 1:nrow(x)) {
if ("Mutant" %in% c(x[i, x_vars])) {
x$marker[i] <- "Mutant"
} else {
wild_type_count <- sum(x[i, x_vars] == "Wild-type", na.rm = TRUE)
unknown_failure_count <- sum(x[i, x_vars] %in% c("", "Failure"), na.rm = TRUE)
if (wild_type_count > unknown_failure_count) {
x$marker[i] <- "Wild-type"
} else {
x$marker[i] <- ""
}
}
}
return(x)
}
demo = left_join(adsl, biomark, by = "SUBJID")
demo <- determine_mutant(demo, c("BMMTR1", "BMMTR2", "BMMTR3", "BMMTR15"))
plot_mutant_cnt(demo, "marker")
document()
rm(list = c("plot_mutant_cnt"))
document()
rm(list = c("determine_mutant"))
document()
?filter
>select
?select
?tbl_summary
chi_square_test = function(x, dth_var, marker_var){
# create a contingency table of death vs. biomarker
# use only observations with marker "Mutant" or "Wild-type"
x |>
filter(marker_var %in% c("Mutant", "Wild-type")) |>
select(dth_var, marker_var) |>
tbl_summary(by = dth_var)
# use chi-squared test to test whether marker is prognostic to death outcome
# use only observations with marker "Mutant" or "Wild-type"
x_prog = x |> filter(marker_var %in% c("Mutant", "Wild-type"))
chisq.test(x = x_prog[[marker_var]], y = x_prog[[dth_var]], correct = TRUE)
}
chi_square_test(demo, "DTH", "marker")
library(dplyr)
chi_square_test = function(x, dth_var, marker_var){
# create a contingency table of death vs. biomarker
# use only observations with marker "Mutant" or "Wild-type"
x |>
filter(!!marker_var %in% c("Mutant", "Wild-type")) |>
select(!!dth_var, !!marker_var) |>
tbl_summary(by = !!dth_var)
# use chi-squared test to test whether marker is prognostic to death outcome
# use only observations with marker "Mutant" or "Wild-type"
x_prog = x |> filter(!!marker_var %in% c("Mutant", "Wild-type"))
chisq.test(x = x_prog[[marker_var]], y = x_prog[[dth_var]], correct = TRUE)
}
chi_square_test(demo, "DTH", "marker")
dim(demo)
View(chi_square_test)
chi_square_test = function(x){
# create a contingency table of death vs. biomarker
# use only observations with marker "Mutant" or "Wild-type"
x |>
filter(marker %in% c("Mutant", "Wild-type")) |>
select(DTH, marker) |>
tbl_summary(by = DTH)
# use chi-squared test to test whether marker is prognostic to death outcome
# use only observations with marker "Mutant" or "Wild-type"
x_prog = x |> filter(marker %in% c("Mutant", "Wild-type"))
chisq.test(x = x_prog$marker, y = x_prog$DTH, correct = TRUE)
}
chi_square_test(demo)
chi_square_test = function(x){
# create a contingency table of death vs. biomarker
# use only observations with marker "Mutant" or "Wild-type"
x_contingency = x |>
filter(marker %in% c("Mutant", "Wild-type")) |>
select(DTH, marker) |>
tbl_summary(by = DTH)
print(x_contingency)
# use chi-squared test to test whether marker is prognostic to death outcome
# use only observations with marker "Mutant" or "Wild-type"
x_prog = x |> filter(marker %in% c("Mutant", "Wild-type"))
chisq.test(x = x_prog$marker, y = x_prog$DTH, correct = TRUE)
}
chi_square_test(demo)
document()
check()
rm(list = c("chi_square_test"))
docum
document()
document()
document()
document()
document()
document()
check()
load("~/Documents/BIS620/bis620final/data/adae.rda")
load("~/Documents/BIS620/bis620final/data/adlb.rda")
load("~/Documents/BIS620/bis620final/data/adls.rda")
load("~/Documents/BIS620/bis620final/data/adpm.rda")
load("~/Documents/BIS620/bis620final/data/adrsp.rda")
load("~/Documents/BIS620/bis620final/data/adsl.rda")
load("~/Documents/BIS620/bis620final/data/biomark.rda")
library(lubridate)
library(dplyr)
library(ggplot2)
library(haven)
library(purrr)
library(gtsummary)
library(devtools)
document()
check()
getwd9)
getwd()
document()
check()
document()
document()
document()
document()
document()
document()
check()
library(devtools)
document()
document()
document()
document()
check()
document()
check()
?chisq.test
document()
document()
check()
document()
check()
load("~/Documents/BIS620/bis620final/data/adae.rda")
load("~/Documents/BIS620/bis620final/data/adlb.rda")
load("~/Documents/BIS620/bis620final/data/adls.rda")
load("~/Documents/BIS620/bis620final/data/adpm.rda")
load("~/Documents/BIS620/bis620final/data/adrsp.rda")
load("~/Documents/BIS620/bis620final/data/adsl.rda")
load("~/Documents/BIS620/bis620final/data/biomark.rda")
?ggsurvplot
??ggsurvplot
library(survminer)
??survfit
library(bis620final)
library(lubridate)
library(dplyr)
library(ggplot2)
library(haven)
library(purrr)
library(gtsummary)
data(adae)
data(adsl)
data()
data(biomark)
# merge dl$adsl and dl$biomark based on SUBJID
demo = left_join(adsl, biomark, by = "SUBJID")
# create a new variable marker to record the patient marker for each patient:
# "Mutant", "Wild-type", or ""
demo <- determine_mutant(demo, c("BMMTR1", "BMMTR2", "BMMTR3", "BMMTR15"))
plot_mutant_cnt(demo, "marker")
# create a contingency table of death vs. marker and use chi-squared test to test whether marker is prognostic to death outcome
# use only observations with marker "Mutant" or "Wild-type"
chi_square_test(demo)
create_KM_plot <- function(data) {
surv_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ marker_treat, data = data),
data = new_df,
conf.int = TRUE
)
surv_plot$plot$theme$legend.position = "top"
surv_plot$plot$theme$legend.direction ="vertical"
surv_plot$plot$theme$legend.direction = "vertical"
print(surv_plot)
}
# create a new variable of the combination of treatment and biomarker
demo$marker_treat <- paste(df$marker, df$treatment, sep = "_")
surv_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ marker_treat, data = demo),
data = new_df,
conf.int = TRUE
)
library(survival)
surv_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ marker_treat, data = demo),
data = new_df,
conf.int = TRUE
)
# create a new variable of the combination of treatment and biomarker
demo$marker_treat <- paste(df$marker, df$treatment, sep = "_")
# create a new variable of the combination of treatment and biomarker
demo$marker_treat <- paste0(df$marker, "_", df$treatment)
# create a new variable of the combination of treatment and biomarker
demo$marker_treat <- paste0(df$marker, "_", df$treatment)
# create a new variable of the combination of treatment and biomarker
demo$marker_treat <- paste0(demo$marker, "_", demo$treatment)
create_KM_plot(demo)
create_KM_plot <- function(data) {
surv_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ marker_treat, data = data),
data = data,
conf.int = TRUE
)
surv_plot$plot$theme$legend.position = "top"
surv_plot$plot$theme$legend.direction ="vertical"
surv_plot$plot$theme$legend.direction = "vertical"
print(surv_plot)
}
# create a new variable of the combination of treatment and biomarker
demo$marker_treat <- paste0(demo$marker, "_", demo$treatment)
create_KM_plot(demo)
?coxph
create_survival_info <- function(data) {
data$marker_treat <- as.factor(data$marker_treat)
fit = coxph(Surv(DTHDY, DTH) ~ marker_treat, data = data)
summary(fit)
}
create_survival_info(demo)
View(demo)
unique(demo$DTH)
#bgm
# Install and load the gbm package
library(gbm)
# Assuming your data is in a dataframe called 'data'
# with 'death_outcome' as the binary outcome and
# other columns as predictors
fit_gbm <- gbm(DTH ~ .,
data = demo,
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
class(demo$SUBJID)
dim(demo[-1])
#bgm
# Install and load the gbm package
library(gbm)
# Assuming your data is in a dataframe called 'data'
# with 'death_outcome' as the binary outcome and
# other columns as predictors
fit_gbm <- gbm(DTH ~ .,
data = demo[-1],
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
# Assuming your data is in a dataframe called 'data'
# with 'death_outcome' as the binary outcome and
# other columns as predictors
gbm_demo <- demo[-1]
gbm_demo$TRT <- factor(gbm_demo$TRT)
fit_gbm <- gbm(DTH ~ .,
data = demo[-1],
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
fit_gbm <- gbm(DTH ~ .,
data = gbm_demo,
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
gbm_demo$ATRT <- factor(gbm_demo$ATRT)
fit_gbm <- gbm(DTH ~ .,
data = gbm_demo,
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
head(gbm_demo$PRSURG)
gbm_demo$PRSURG <- factor(gbm_demo$PRSURG)
fit_gbm <- gbm(DTH ~ .,
data = gbm_demo,
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
fit_gbm <- gbm(DTH ~ ATRT + marker,
data = gbm_demo,
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
class(gbm_demo$marker)
gbm_demo$marker <- factor(gbm_demo$marker)
fit_gbm <- gbm(DTH ~ ATRT + marker,
data = gbm_demo,
distribution = "bernoulli", # for binary outcome
n.trees = 5000,
interaction.depth = 3,
cv.folds = 5)
# Summary of the model
summary(fit_gbm)
class(gbm_demo$marker)
plot(gbm_caret, i.var = 1)
plot(fit_gbm, i.var = 1)
plot(fit_gbm, i.var = 2)
# fit a logistic regression model on the joint effect of treatment and marker
# use only observations with marker "Mutant" or "Wild-type"
demo_joint = demo |>
filter(marker %in% c("Mutant", "Wild-type"))
glm(DTH ~ ATRT * marker, data = demo_joint, family = binomial) |>
anova(test="Chisq")
?`gbm-package`
x_vars = c("ATRT","TRT","marker")
paste(x_vars, sep = " + ")
paste(x_vars, collapse = " + ")
paste0("DTH ~ ", paste(x_vars, collapse = " + "))
?glm
?anova
fit_logistic = function(x){
x_joint = x |>
filter(marker %in% c("Mutant", "Wild-type"))
glm(DTH ~ ATRT * marker, data = x, family = binomial) |>
anova(test="Chisq")
}
# fit a logistic regression model on the joint effect of treatment and marker
# use only observations with marker "Mutant" or "Wild-type"
fit_logistic(demo)
library(gbm)
gbm_demo <- demo
gbm_demo$ATRT <- factor(gbm_demo$ATRT)
gbm_demo$marker <- factor(gbm_demo$marker)
fit_gbm(gbm_demo, c("ATRT", "marker"))
fit_gbm = function(x, x_vars){
my_formula = paste0("DTH ~ ", paste(x_vars, collapse = " + "))
my_fit = gbm(my_formula,
data = x,
distribution = "bernoulli",
interaction.depth = 3,
cv.folds = 5)
summary(my_fit)
}
library(gbm)
gbm_demo <- demo
gbm_demo$ATRT <- factor(gbm_demo$ATRT)
gbm_demo$marker <- factor(gbm_demo$marker)
fit_gbm(gbm_demo, c("ATRT", "marker"))
# fit a gbm model
gbm_demo <- demo
gbm_demo$ATRT <- factor(gbm_demo$ATRT)
gbm_demo$marker <- factor(gbm_demo$marker)
my_vars <- c("ATRT", "marker")
fit_gbm(gbm_demo, my_vars)
fit_gbm = function(x, x_vars){
my_formula = paste0("DTH ~ ", paste(x_vars, collapse = " + "))
print(my_formula)
# my_fit = gbm(my_formula,
#              data = x,
#              distribution = "bernoulli",
#              interaction.depth = 3,
#              cv.folds = 5)
# summary(my_fit)
}
fit_gbm(gbm_demo, my_vars)
fit_gbm = function(x, x_vars){
my_formula = paste0("DTH ~ ", paste(x_vars, collapse = " + "))
print(my_formula)
my_fit = gbm(my_formula,
data = x,
distribution = "bernoulli",
interaction.depth = 3,
cv.folds = 5)
summary(my_fit)
}
fit_gbm(gbm_demo, my_vars)
my_formula = paste0("DTH ~ ", paste(x_vars, collapse = " + "))
gbm(my_formula, data = gbm_demo)
glm(my_formula, data = demo)
library(usethis)
testthat
use_testthat()
test()
test()
test()
document()
check()
getwd()
check()
.Last.error
document()
rm(list = c("create_KM_plot", "create_survival_info", "fit_gbm", "fit_logistic"))
document()
check()
devtools::load_all("path/to/bis620final")
getwd
getwd()
library(devtools)
document()
check()
check()
library(mgcv)
?gam
document()
test()
test()
document()
document()
test()
check()
check()
install_github("zihanwang00/bis620.2023")
library(bis620.2023)
?bis620.2023
??bis620.2023
vignette(package = "bis620.2023")
unique(demo$ATRT)
covr::report
covr::report()
library(bis620final)
library(lubridate)
library(dplyr)
library(ggplot2)
library(gtsummary)
library(survival)
library(survminer)
data(adae)
data(adlb)
data(adls)
data(adpm)
data(adrsp)
data(adsl)
data(biomark)
# merge dl$adsl and dl$biomark based on SUBJID
demo = left_join(adsl, biomark, by = "SUBJID")
# create a new variable marker to record the patient marker for each patient:
# "Mutant", "Wild-type", or ""
demo <- determine_mutant(demo, c("BMMTR1", "BMMTR2", "BMMTR3", "BMMTR15"))
document()
document()
test()
use_github_action_check_standard()
document()
check()
document()
check()
library(pkgdown)
build_site_github_pages()
install()
build_site_github_pages()
